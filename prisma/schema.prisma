// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model with roles
model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  name          String
  phone         String?
  role          Role            @default(CUSTOMER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bookings      Booking[]
  orders        Order[]
  tokens        Token[]
  TravelBooking TravelBooking[]
  auditLogs     Audit[]         // Relation to audit logs
}

enum Role {
  USER
  CUSTOMER
  HERDER
  ADMIN
}

// Yurt model
model Yurt {
  id            String    @id @default(uuid())
  name          String
  description   String    @db.Text
  location      String
  pricePerNight Decimal   @db.Decimal(10, 2)
  capacity      Int
  amenities     String    @db.Text
  images        String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  ownerId       String?   
  owner         User?     @relation(fields: [ownerId], references: [id])
}

// Travel model
model Travel {
  id          String          @id @default(uuid())
  name        String
  description String          @db.Text
  duration    Int // in days
  basePrice   Decimal         @db.Decimal(10, 2)
  location    String
  itinerary   String          @db.Text
  images      String          @db.Text
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  bookings    TravelBooking[]
}

// Product model
model Product {
  id          String      @id @default(uuid())
  name        String
  description String      @db.Text
  price       Decimal     @db.Decimal(10, 2)
  stock       Int
  images      String      @db.Text
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  ownerId     String?
  owner       User?       @relation(fields: [ownerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

// Category model
model Category {
  id        String    @id @default(uuid())
  name      String
  photo     String?
  createdAt DateTime  @default(now())
  products  Product[]
}

// Booking model for Yurts
model Booking {
  id         String        @id @default(uuid())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  yurt       Yurt          @relation(fields: [yurtId], references: [id])
  yurtId     String
  startDate  DateTime
  endDate    DateTime
  totalPrice Decimal       @db.Decimal(10, 2)
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

// Travel Booking model
model TravelBooking {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  travel         Travel        @relation(fields: [travelId], references: [id])
  travelId       String
  startDate      DateTime
  numberOfPeople Int
  totalPrice     Decimal       @db.Decimal(10, 2)
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Order model for Products
model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  totalPrice      Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  shippingAddress String      @db.Text
  expectedDelivery DateTime?
  paymentInfo     String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Order Item model
model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

// Tokens for password reset and OTP
model Token {
  id         String    @id @default(uuid())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  identifier String?
  token      String    @unique
  type       TokenType
  expiresAt  DateTime
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

enum TokenType {
  PASSWORD_RESET
  OTP
}

// Audit model for tracking user activities
model Audit {
  id          String      @id @default(uuid())
  userId      String?     // Optional: action might not be associated with a user
  action      AuditAction
  entityType  String      // The type of entity (User, Booking, Product, etc.)
  entityId    String      // The ID of the entity
  details     String?     @db.Text // Additional details about the action
  createdAt   DateTime    @default(now())

  // Optional relation to User if userId is provided
  user        User?       @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  OTHER
}
